Solutions
0x12af NUM NUM x100 NUM NUM NUM NUM NUM int ( STR , 2 ) NUM b1100111 NUM b1100111 NUM o27 NUM o27 NUM
raw_input () raw_input import sys print STR menu NUM ) say foo NUM ) say bar STR answer = raw_input ( STR ) if STR in answer : print STR elif STR in answer : print STR print menu while lastkey = STR 1 in lastkey : # do stuff
( 1 , 2 , 3 ) [ 1 , 2 , 3 ]
print tvdbinstance [ 1 ][ 23 ][ STR ] # get the name of episode NUM of season NUM tvdb () dict () x [ 1 ][ 2 ][ 3 ][ 4 ] = STR if x [ 1 ]. has_key ( 2 ): x [ 1 ][ 2 ] = [] self . data [ show_id ][ season_number ][ episode_number ][ attribute_name ] = STR x [ 3 ][ 24 ] showcontainer show season episode search () show () __setitem__ __getitem_ has_key self . data raise season_not_found season () __getitem__ __setitem__ __getitem__ dict dict self . data [ seas_no ][ ep_no ][ STR ] = STR _setitem _setdata showcontainer dict
( pid , status ) = os . wait () ( exitstatus , signum ) = decode ( status )
nsthread . detachnewthreadselector_totarget_withobject_ ( STR , self , none )
show name - [ 01x23 ] - episode name . avi show name - [ 01xspecial02 ] - special name . avi show name - [ 01xextra01 ] - extra name . avi show name - [ 01x23 ]. avi show name / season NUM / the_file . avi show name / season NUM / checker = [ { STR : STR , STR : STR , STR : check_valid (), # runs check_valid () on all files STR : 0 # if it returns true , this is the status the file gets }
git filter - branch wc - l * git reset -- hard wc - l me something : / gitsloc -- branch master NUM NUM NUM NUM NUM NUM . lines () require STR require STR total = NUM g = git . open ( working_dir = STR ) last = nil g . log . each do cur diff = g . diff ( last , cur ) total = total + diff . lines puts total last = cur end
from xml . dom . minidom import * def make_xml (): doc = document () node = doc . createelement ( STR ) node . innertext = STR doc . appendchild ( node ) return doc if __name__ == STR : make_xml (). writexml ( sys . stdout ) <? xml version = STR ?> < foo /> <? xml version = STR ?> < foo > bar </ foo >
class node (): name = STR children = [] root node children node root
import unittest l = [[ STR , STR , STR ,], [ STR , STR , STR ], [ STR , STR , STR ]] class testsequence ( unittest . testcase ): def testsample ( self ): for name , a , b in l : print STR , name self . assertequal ( a , b ) if __name__ == STR : unittest . main ()
a class a : def __init__ ( self ): self . name = STR __dict__ { STR : STR } b class b : name = STR __dict__ name b __dict__
def sh_escape ( s ): return s . replace ( STR , STR ). replace ( STR , STR ). replace ( STR , STR ) os . system ( STR % ( sh_escape ( in_filename ), sh_escape ( out_filename )))
* ** param2 def foo ( param1 , * param2 ): def bar ( param1 , ** param2 ):
import cgi class classx ( object ): pass # with own __repr__ class classy ( object ): pass # with own __repr__ inst_x = classx () inst_y = classy () inst_z =[ i * i for i in range ( 25 ) ] inst_b = true class htmldecorator ( object ): def html ( self ): # an STR version of __repr__ return cgi . escape ( self . __repr__ ()). join (( STR , STR )) print htmldecorator ( inst_x ). html () print htmldecorator ( inst_y ). html () wrapped_z = htmldecorator ( inst_z ) inst_z [ 0 ] += NUM wrapped_z [ 0 ] += NUM print wrapped_z . html () print htmldecorator ( inst_b ). html ()
import sys import os try : os . kill ( int ( sys . argv [ 1 ]), NUM ) print STR except : print STR
update () x = { STR : 1 , STR : NUM } y = { STR : 10 , STR : NUM } z = x . update ( y ) print ( z ) none x { STR : NUM , STR : NUM , STR : NUM } z x dict . update ()
name = sys . _getframe ( 1 ). f_code name = STR %( os . path . split ( name . co_filename )[ 1 ], name . co_firstlineno , name . co_name ) foo . py : 22 bar () blah blah
bzr post - commit post_commit ( local , master , old_revno , old_revid , new_revno , mew_revid ) bzrlib python
def foo (): STR this function does nothing . STR pass
from tkinter import * import tkmessagebox root = tk () root . withdraw () # todo not if a window with this title exists tkmessagebox . showinfo ( STR , STR . join ( sys . argv [ 1 :]))
script_1 . py script_2 . py script_2 . py script_3 . py script_3 . py script_3 . py script_2 . py os . getcwd ()
select count ( id ), avg ( a ), avg ( b ), avg ( c ), avg ( d ) from tuples ; create table tuples ( id integer primary key , a integer , b integer , c integer , d integer ); copy tuples from STR delimiter as STR java NUM . 5 threads NUM ms java NUM . 5 NUM ms python NUM . 5 numpy NUM ms python NUM . 5 NUM ms increased the shared memory available to postgres to NUM mb increased the working memory to NUM mb disabled connection and statement logging used a stored procedure via create function language sql
how_many_days = ( end_date - start_date ). days freqs = defaultdict ( int ) for x in xrange ( how_many_responses ): freqs [ int ( how_many_days * weibullvariate ( 0 . 5 , NUM ))] += NUM timeline = [] day = start_date for i , freq in sorted ( freqs . iteritems ()): timeline . append (( day , freq )) day += timedelta ( days = 1 ) return timeline
d = { STR : STR , STR : STR , STR : STR } this is a this is b this is c
shoes . app do t = para STR button STR do alert STR # when clicked , make an alert t . replace STR # .. and replace the label STR __main__ : a = myapp () a . ok () # trigger the clicked action la
s = set ([ 1 , NUM , NUM ]) s s . pop () elem = s . pop () s . add ( elem )
class myrequesthandler ( basehttpserver . basehttprequesthandler ): def doget [ ] class threadinghttpserver ( threadingmixin , httpserver ): pass server = threadinghttpserver (( STR , NUM ), myrequesthandler ) server . serve_forever ()
siteroot / models / controllers / controller1 / controller2 / templates / template1 / template2 / path = os . path . join ( os . path . dirname ( __file__ ), STR ) base_paths = os . path . split ( os . path . dirname ( __file__ )) template_dir = os . path . join ( base_paths [ 0 ], STR )
def bar ( self ): print STR class metafoo ( type ): def __new__ ( cls , name , bases , dict ): dict [ STR ] = bar return type ( name , bases , dict ) class foo ( object ): __metaclass__ = metafoo f = foo () f . foobar () bar f . foobar . func_name STR dict [ STR ] = types . functiontype ( bar . func_code , {}, STR )
__myprivatemethod () class myclass : def mypublicmethod ( self ): print STR def __myprivatemethod ( self ): print STR obj = myclass () obj . mypublicmethod () public method obj . __myprivatemethod () traceback ( most recent call last ): file STR , line NUM , in attributeerror : myclass instance has no attribute STR dir ( obj ) [ STR , STR , STR , STR ] obj . _myclass__myprivatemethod () this is private !!
app / __init__ . py sub1 / __init__ . py mod1 . py sub2 / __init__ . py mod2 . py mod1 mod2 from .. sub2 import mod2 sys . path __init__ . py sub1 subx
[{ STR : STR , STR : 39 }, { STR : STR , STR : 10 }] name [{ STR : STR , STR : 10 }, { STR : STR , STR : 39 }]
centroid = average ( x ), average ( y ), average ( z ) x y z
2008 - 09 - 17 NUM : 02 : 00 + 10 utc NUM - 09 - 17 NUM : 02 : 00
import atexit def helloworld (): print ( STR ) atexit . register ( helloworld ) raise exception ( STR ) traceback ( most recent call last ): file STR , line NUM , in < module > raise exception ( STR ) exception : good bye cruel world ! hello world !
a_list = [ 1 , NUM , NUM ] a_list . len () # doesn t work len ( a_list ) # works
class myclass : def __init__ ( self , foo ): if foo != NUM : raise error ( STR ) def testinsufficientargs ( self ): foo = NUM self . assertraises (( error ), myclass = myclass ( error , foo )) nameerror : global name STR is not defined
cin >> a >> b >> c ; a int b float c input () raw_input ()
x = [ 1 , NUM , NUM , STR , STR , NUM ] unique ( x ) [ 1 , NUM , STR , NUM ]
windows =[{ STR : STR , STR : [( 0 , STR )], hinst = win32api . getmodulehandle ( none ) hicon = win32gui . loadimage ( hinst , NUM , win32con . image_icon , NUM , NUM , win32con . lr_defaultsize ) hicon = win32gui . loadimage ( hinst , STR , win32con . image_icon , NUM , NUM , win32con . lr_defaultsize )
class person ( db . model ): first_name = db . stringproperty ( required = true ) last_name = db . stringproperty ( required = true ) p s STR print p [ s ] p [ s ] = new_value typeerror
error_log . fcgi mysite . fcgi dispatch . fcgi wsgiserver : missing fastcgi param request_method required by wsgi ! wsgiserver : missing fastcgi param server_name required by wsgi ! wsgiserver : missing fastcgi param server_port required by wsgi ! wsgiserver : missing fastcgi param server_protocol required by wsgi !
import tempfile , shutil f = tempfile . temporaryfile ( mode = STR ) f . write ( STR ) shutil . copy ( f . name , STR ) traceback ( most recent call last ): file STR , line NUM , in < module > shutil . copy ( f . name , STR ) file STR , line NUM , in copy copyfile ( src , dst ) file STR , line NUM , in copyfile fsrc = open ( src , STR ) ioerror : [ errno NUM ] permission denied : STR
for i in range ( 0 , NUM ): for i in xrange ( 0 , NUM ):
import django . template from django . template import template , context t = template ( STR ) importerror : settings cannot be imported , because environment variable django_settings_module is undefined .
datetime . time NUM : 34 : 59 NUM : 35 : 02 datetime . time ( 11 , NUM , NUM ) + NUM typeerror : unsupported operand type ( s ) for +: STR and STR datetime . time ( 11 , NUM , NUM ) + datetime . timedelta ( 0 , NUM ) typeerror : unsupported operand type ( s ) for +: STR and STR datetime . time ( 11 , NUM , NUM ) + datetime . time ( 0 , NUM , NUM ) typeerror : unsupported operand type ( s ) for +: STR and STR def add_secs_to_time ( timeval , secs_to_add ): secs = timeval . hour * NUM + timeval . minute * NUM + timeval . second secs += secs_to_add return datetime . time ( secs // NUM , ( secs % NUM ) // NUM , secs % NUM )
if not someobj : # do something if someobj == none : # do something
self . response . out . write ( STR ) import urllib2 f = urllib2 . urlopen ( STR ) s = f . read () print s f . close () login : required passman = urllib2 . httppasswordmgrwithdefaultrealm () auth_handler = urllib2 . httpbasicauthhandler () auth_handler . add_password ( none , uri = STR , user = STR , passwd = STR ) opener = urllib2 . build_opener ( auth_handler ) urllib2 . install_opener ( opener ) h = httplib2 . http () auth_uri = STR headers = { STR : STR } myrequest = STR % ( STR , STR ) response , content = h . request ( auth_uri , STR , body = myrequest , headers = headers ) if response [ STR ] == STR : authtok = re . search ( STR , content ). group ( 1 ) headers = {} headers [ STR ] = STR % authtok . strip () headers [ STR ] = STR response , content = h . request ( STR , STR , body = STR 302 STR , headers = headers ) print content
li = [[ 0 , 1 , 2 ],[ 3 , 4 , 5 ],[ 6 , 7 , 8 ]] li2 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] s = STR
text = STR text STR text . decode ( STR ) u STR unicode () unicode ( text ) traceback ( most recent call last ): file STR , line NUM , in < module > unicodedecodeerror : STR codec can STR utf - 8 STR xe1 STR utf - 8 STR utf - 8 STR xc3 xa1 STR ascii STR t decode byte NUM xc3 in position NUM : ordinal not in range ( 128 ) unicode ( r , STR ) unicode ( r , STR ) traceback ( most recent call last ): file STR , line NUM , in < module > typeerror : coercing to unicode : need string or buffer , returnsencoded found
class enum ( object ): STR simple enum class example usage : codes = enum ( STR ) # codes . baz will be NUM and so on STR def __init__ ( self , names ): for number , name in enumerate ( names . split ()): setattr ( self , name , number )
class hi : def __init__ ( self ): self . ii = STR self . kk = STR mystery_method ( hi ) [ STR , STR ]
from tkinter import * def quit (): # code to exit root = tk () button ( root , text = STR , command = quit ). pack () root . mainloop () quit
mytext = self . canvas . create_text ( 5 , NUM , anchor = nw , text = STR )
# i encode the data i STR username STR mandark STR password STR deedee STR http :// www . forum . com / ucp . php ? mode = login , data ) output = page . read ()
owfs owfs cat cat onewire /{ deviceid }/ log / temperature . 1 onewire /{ deviceid }/ log / temperature . all histogram / temperature . all owpython import ow ow . init ( STR ) # initialize usb ow . sensor ( STR ). sensorlist () [ sensor ( STR ), sensor ( STR )] x = ow . sensor ( STR ) print x . type , x . temperature ds1921 NUM x . log attributeerror
cal = icalendar . calendar . from_string ( data )
# file NUM def f1 (): print STR class c1 ( object ): def do_eval ( self , x ): # maybe this should be do_evil , given what happens print STR eval ( x ) eval ( x , globals (), locals ()) nameerrors # interactive class c2 ( object ): def do_eval ( self , x ): # maybe this should be do_evil , given what happens print STR eval ( x ) eval ( x , globals (), locals ()) def f2 (): print STR from file1 import c1 import file1 c1 (). do_eval ( STR ) c1 (). do_eval ( STR ) c1 (). do_eval ( STR ) file1 . c1 (). do_eval ( STR ) file1 . c1 (). do_eval ( STR ) file1 . c1 (). do_eval ( STR ) c2 (). do_eval ( STR ) c2 (). do_eval ( STR ) c2 (). do_eval ( STR )
import tix import tkmessagebox class app ( object ): def __init__ ( self , window ): window . winfo_toplevel (). wm_title ( STR ) self . window = window self . combo = tix . combobox ( window ) self . combo . insert ( tix . end , STR ) self . combo . insert ( tix . end , STR ) self . combo . entry [ STR ] = STR self . combo [ STR ] = true self . combo . pack () button = tix . button ( window ) button [ STR ] = STR button [ STR ] = self . go button . pack () def go ( self ): tkmessagebox . showinfo ( STR , self . combo [ STR ]) if __name__ == STR : root = tix . tk () app ( root ) root . mainloop ()
import datetime , re from datetime import tzinfo class mytimezone ( tzinfo ): STR docstring for mytimezone STR def utfoffset ( self , dt ): return timedelta ( hours = 1 ) def mydatehandler ( adatestring ): STR u STR STR _my_date_pattern = re . compile ( r STR ) day , month , year , hour , minute , second = _my_date_pattern . search ( adatestring ). groups () month = [ STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR ]. index ( month . upper ()) + NUM dt = datetime . datetime ( int ( year ), int ( month ), int ( day ), int ( hour ), int ( minute ), int ( second ) ) # dt = dt - datetime . timedelta ( hours = 1 ) # dt = dt - dt . tzinfo . utfoffset ( mytimezone ()) return ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , NUM , NUM , NUM ) def main (): print mydatehandler ( STR ) if __name__ == STR : main ()
STR foo , bar , STR , three four STR [ STR , STR , STR , STR ]
from soappy import wsdl wsdlurl = STR client = wsdl . proxy ( wsdlurl ) credentials = [ STR , STR ] client . auth_login ( STR , credentials ) credentials = { STR : STR , STR : STR } client . auth_login ( STR , credentials )
def snaptogrid ( originalpos , offset , step ): index = int (( originalpos - offset ) / step ) # truncates the remainder away return index * gap + offset def mousemotion ( self , event ): pixelpos = event . pos [ y ] odepos = scroll . pixelpostoodepos ( pixelpos ) self . tool . positionchanged ( odepos ) def pixelpostoodepos ( pixelpos ): offsetpixelpos = pixelpos - self . viewportoffset return pixelstoode ( offsetpixelpos ) def pixelstoode ( pixels ): return float ( pixels ) / float ( pixels_in_an_ode_unit ) def positionchanged ( self , newpos ): self . snappedpos = snaptogrid ( originalpos , y_offset , y_step ) # in tool def render ( self , screen ): scroll . render ( screen , self . image , self . snappedpos ) # in scroll def render ( self , screen , image , odepos ): pixelpos = self . odepostopixelpos ( odepos ) screen . blit ( image , pixelpos ) # screen is a surface from pygame for the curious def odepostopixelpos ( self . odepos ): offsetpos = odepos + self . viewportoffset return odetopixels ( offsetpos ) def odetopixels ( odeunits ): return int ( odeunits * pixels_in_an_ode_unit )
find / podcasts / current - mindepth NUM - mtime STR - exec mv {} / podcasts / old ; def allfiles ( filepath , depth = 1 , flist =[]): fpath = os . walk ( filepath ) fpath =[ item for item in fpath ] while depth < len ( fpath ): for item in fpath [ depth ][- 1 ]: flist . append ( fpath [ depth ][ 0 ]+ os . sep + item ) depth += 1 return flist
static void main ( string [] args ) { var temp = from q in getrandomnumbers ( 100 ). distinct (). take ( 5 ) select q ; } private static ienumerable getrandomnumbers ( int max ) { random r = new random (); while ( true ) { yield return r . next ( max ); } }
if ( var = / foo (.+)/) { # do something with NUM } elsif ( var = / bar (.+)/) { # do something with NUM } elsif ( var = / baz (.+)/) { # do something with NUM } m = re . search ( r STR , var ) if m : # do something with m . group ( 1 ) else : m = re . search ( r STR , var ) if m : # do something with m . group ( 1 ) else : m = re . search ( r STR , var ) if m : # do something with m . group ( 2 )
/ real / path / to / dir / linked / path / to / dir import os os . chdir ( STR ) print os . getcwd () / real / path / to / dir
[( id __1_ , description , id _type ), ( id __2_ , description , id _type ), , ( id __n_ , description , id _type ))
result = [ x ** 2 for x in mylist if type ( x ) is int ] result = [ expensive ( x ) for x in mylist if expensive ( x )]
a = lambda x : NUM + x a ( 5 ) NUM def b ( x ): return NUM + x b ( 5 ) NUM
urls . py from myapp import views ( r STR , views . categories ) categories myapp / views . py views . categories django . core . urlresolvers . reverse () from django . core . urlresolvers import reverse from myapp import views url = reverse ( views . categories ) noreversematch noreversematch : reverse for STR with arguments STR and keyword arguments STR not found . url ( r STR , views . categories , STR ) url = reverse ( STR ) reverse reverse
string stringvalue = string . isnullorempty ( otherstring ) ? defaultstring : otherstring ;
alist = range ( 1000000 ) # or list ( range ( 1000000 )) in python NUM . 0
from somemodule import foo print foo . methods # or whatever is the correct method to call
#!/ usr / bin / env python def f (* args ): STR t = NUM , - 1 f (* map ( lambda i : lambda : i , t )) [ 1 , - 1 ] f (*( lambda : i for i in t )) # -> [- 1 , - 1 ] [ 1 , - 1 ] f (*[ lambda : i for i in t ]) # -> [- 1 , - 1 ] [ 1 , - 1 ] STR alist = [ a () for a in args ] print ( alist ) if __name__ == STR : import doctest ; doctest . testmod () t = NUM , - 1 args = [] for i in t : args . append ( lambda : i ) map ( lambda a : a (), args ) [- 1 , - 1 ] args = [] for i in t : args . append (( lambda i : lambda : i )( i )) map ( lambda a : a (), args ) [ 1 , - 1 ] args = [] for i in t : args . append ( lambda i = i : i ) map ( lambda a : a (), args ) [ 1 , - 1 ]
os . listdir ( os . getcwd ()) [ STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR , STR ] for root , dirnames , filenames in os . walk ( STR ): print dirnames break [ STR , STR , STR , STR , STR , STR , STR , STR , STR ]
from foundation import * from appkit import * class myapplicationappdelegate ( nsobject ): def applicationdidfinishlaunching_ ( self , sender ): nslog ( STR ) statusitem = nsstatusbar . systemstatusbar (). statusitemwithlength_ ( nsvariablestatusitemlength ) statusitem . settitle_ ( u STR ) statusitem . sethighlightmode_ ( true ) statusitem . setenabled_ ( true )
class comment ( db . model ): series = db . referenceproperty ( reference_class = series ); def series_id ( self ): return self . _series < a href = STR > more </ a > < a href = STR > more </ a >
class person ( models . model ): class address ( models . model ): contact = models . foreignkey ( person ) def detail ( request , person_id ): person = get_object_or_404 ( person , pk = person_id ) return render_to_response ( STR , { STR : unicode ( person ), STR : person . address_set . all () } ) {% extends STR %} {% for address in addresses %} < b >{{ address . name }}</ b > {{ address . type }} < br > {{ address . street_1 }}< br > {{ address . street_2 }}< br > {{ address . city }} {{ address . stateprov }} {{ address . postalcode }}< br > {{ address . country }} < hr > {{ endfor }} {% extends STR %} {% for address in addresses %} {% address . as_html4 %} {% endfor %} {% extends STR %} < table >< tr > {% for address in addresses %} < tr >< td > {% address . as_html4 </ td >< td > %} </ td ></ tr > {% endfor %} </ table >
s = difflib . sequencematcher ( isjunk , text1 , text2 ) ratio = s . ratio ()
from module import * __import__ ( s , fromlist = STR )
unsigned long value = NUM xdeadbeef ; value &= ( 1 << 10 );
class entry ( models . model ): title = models . charfield ( max_length = 50 ) slug = models . charfield ( max_length = 50 , unique = true ) body = models . charfield ( max_length = 200 ) class entryadmin ( admin . modeladmin ): prepopulated_fields = { STR :( STR ,)}
def __init__ ( self , ten_byte_string ): self . whole_string = ten_byte_string self . file_identifier = self . whole_string [: 3 ] self . major_version = struct . pack ( STR , self . whole_string [ 3 : 4 ]) # this self . minor_version = struct . pack ( STR , self . whole_string [ 4 : 5 ]) # and this self . flags = self . whole_string [ 5 : 6 ] self . len = self . whole_string [ 6 : 10 ]
for date in foo ( from_date , to_date , delta = hours ): print date
lines = open ( STR ). readlines ()
product . objects . all (). order_by ( STR ) def debug ( request ): order = product . objects . all (). order_by ( STR ) return render_to_response ( STR , { STR : order , STR : name }) def manage_all ( request ): if request . method == STR : postentries = len ( request . post ) x = NUM while x < postentries : p = product . objects . get ( pk = x ) p . order = int ( request . post . get ( str ( x ), STR order
// c # example string thisismyvariable = STR public void thisismymethod () # python example this_is_my_variable = STR def this_is_my_function ():
import commands print commands . getoutput ( STR )
**/ cvs /* # all files immediately under a cvs directory . mydir / mysubdir /** # all files recursively under mysubdir files = get_files ( STR ) for file in files : print file => cvs / repository mydir / mysubdir / cvs / entries mydir / mysubdir / foo / bar / cvs / entries
import subprocess from cstringio import stringio subprocess . popen ([ STR , STR ], stdout = subprocess . pipe , stdin = stringio ( STR )). communicate ()[ 0 ] traceback ( most recent call last ): file STR , line NUM , in ? file STR , line NUM , in __init__ ( p2cread , p2cwrite , file STR , line NUM , in _get_handles p2cread = stdin . fileno () attributeerror : STR object has no attribute STR
import socket connected ={} def inrequest ( text ): content = STR get STR get STR post STR n STR r STR STR STR STR c : async STR http / 1 . 1 NUM ok n n STR / messages STR post STR get STR is connected STR STR STR to STR STR post STR messages / STR STR get STR messages / STR p STR messages ). appendchild ( message ); get ( user ); } req . send ( null ) } </ script > </ head > < body > < span > from </ span > < input id = STR /> < input type = STR value = STR onclick = STR /> < span > to </ span > < input id = STR /> < span >:</ span > < input id = STR /> < input type = STR value = STR onclick = STR /> < div id = STR > </ div > </ body > </ html >
.* dog .* cat dog my dog her dog mouse cat dog ::::: pattern .* dog .* repeats NUM more times . mouse #!/ usr / bin / env python # import re import types def remove_repeats ( l_string , l_regex ): STR take a string , remove similar lines and replace with a summary message . l_regex accepts strings and tuples . STR # convert string to tuple . if type ( l_regex ) == types . stringtype : l_regex = l_regex , for t in l_regex : r = STR STR ::::: pattern STR more times . n STR STR l_string = r # reset string to modified string . return l_string
project , links , profile , contact urlpatterns ( r STR , STR ), ( r STR , STR ), ( r STR , STR ), ( r STR , STR ), map . connect ( STR )
import tempfile tup = tempfile . mkstemp () import os f = os . fdopen ( tup [ 0 ]) f . write ( STR ) traceback ( most recent call last ): file STR , line NUM , in ? ioerror : [ errno NUM ] bad file descriptor
bitmap = bitmap ( 8 , 8 ) if bitmap [ 1 , NUM ] or bitmap . get ( 0 , NUM ) bitmap . data () new_bitmap = bitmap ( 8 , NUM , bitmap . data ())
def divisorgenerator ( n ): for i in xrange ( 1 , n / 2 + 1 ): if n % i == NUM : yield i yield n for i in factorgenerator ( 100 ): print i ( 2 , NUM ) ( 5 , NUM ) for i in divisorgen ( 100 ): print i NUM NUM NUM NUM NUM NUM NUM NUM NUM
inputstring = STR line NUM line NUM line NUM STR for line in inputstring : dostuff ()
import unittest import sys Class BookTests(unittest TestCase): @classmethod def setUpClass(cls): cls._mine = mymodule.myclass(test_file.txt, baz)
import win32gui ImportError : No module named win32gui
def distance(x, y): if x >= y: result = x - y else: result = y - x return result
In[2] : mimetypes. guess_extension('image/jpeg', strict=False) Out[2] : .jpe
<?xml version="1.0" encoding="UTF-8"?> <MyDocument xmi:version="2.0"> <Thingamabob name="A" hasDohicky="//@Dohicky.0"> <Dingus/> </Thingamabob> <Dohicky name="B"/> </MyDocument>
String path = /puppy.png try { BufferedImage image = ImageIO.read(getClass().getResourceAsStream(path)); } catch (Exception ex) { ex.printStackTrace(); }
webbrowser.open(STRING) gmail_user = raw_input(Please enter your Gmail username:)
def test1(): exec(print hi from test1) def test2(): exec(print hi from test2) def subfunction(): return True
